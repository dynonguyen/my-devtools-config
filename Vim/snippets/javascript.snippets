# ==== JS Function ====
snippet fn "Normal function" b
	${1:async} function ${2:fnName} (${3:params}){
		$4
	}

snippet vfn "variable function" b
	const ${1:fnName} = function(${2:params}){
		$3
	}

snippet => "Reduced arrow function" b
	(${1:params}) => { $2 }

snippet afn "Arrow function" b
	const ${1:fnName} = ${2:async} (${3:params}) => {
		$4
	}

snippet iife "Immediately Incoked function expression" b
	;( ${1:async} () => {
		$2
 	})();

# ==== Console ====
snippet clg "console.log()" b
	console.log($1);

snippet clt "console.table()" b
	console.table($1);

snippet cti "console.time()" b
	console.time(${1:key});

snippet cte "console.timeEnd()" b
	console.timeEnd(${1:key});

snippet ci "console.info" b
	console.info($1);

snippet cer "console.error()" b
	console.error($1);

snippet cw "console.warn()" b
	console.warn($1);

# ==== Condition ====
snippet if "if" b
	if(${1:condition}){
		$2
	}

snippet ifel "if... else" b
	if(${1:condition}){
		$2
	}else{
		$3
	}

snippet ter "tertiary a ? b : c" b
	${1:condition} ? ${2:if true} : ${3: if false}

snippet swicase "switch ... case" b
	switch(${1:key}){
		case ${2:case}:
			$3
			break;
		default:
			$4
			break;
	}
	
snippet case "case" b
	case ${1:value}:
		$2
		break;

# ==== Loop ====
snippet for "for loop" b
	for(let ${1:i} = 0; $1 < ${2:length}; ${3:++}$1){
		$4
	}

snippet forin "for in (object)" b
	for(let ${1:key} in ${2:object}){
		$3
	}

snippet forof "for of (array)" b
	for(let ${1:element} of ${2:array}){
		$3
	}

snippet foreach "for each" b
	${1:array}.forEach(elem => {
		$1
	});

snippet whil "while ..." b
	whil(${1:condition}){
		$2
	}

snippet dowhi "do ... while ..." b
	do{
		$2
	}while(${1:condition});
	
# ==== Handle error ====
snippet try "try ... catch ..." b
	try{
		$1
	}catch(error){
		${2:throw error}
	}

snippet tryf "try ... catch ... finally" b
	try{
		$1
	}catch(error){
		${2:throw error}
	}finally{
		$3
	}

snippet terr "throw error"
	throw new Error('${1:error message}')

# ==== JS modules ====
snippet req "require a package" b
	const ${1:packageName} = require('${2:$1}');

snippet mexp "module.export" b
	module.exports = ${1:object};

snippet imp "import a package" b
	import ${1:packageName} from '${2:$1}';

snippet impas "import a package as new name" b
	import ${1:packageName} as ${2:newName} from '${3:$1}';

snippet impall "import all packages as new object" b
	import * as ${1:newName} from '${2:path}';

snippet expd "export default a package" b
	export default ${1:packageName};

# ==== Methods ====
snippet timeout "setTimeout" b
	setTimeout(()=>{
		$2
	}, ${1:time});

snippet interval "setInterval" b
	const ${1:intervalId} = setInterval(()=>{
		$3
	}, ${2:time});

snippet promise "return promise" b
	return new Promise((resolve, reject) => {
		$1
	})

